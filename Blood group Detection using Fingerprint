from google.colab import files
files.upload()  # This will let you upload the kaggle.json file

!mkdir -p ~/.kaggle-2
!cp kaggle-2.json ~/.kaggle-2/
!chmod 600 ~/.kaggle-2/kaggle-2.json

import shutil
shutil.move('kaggle-2.json', '/root/.kaggle-2/kaggle-2.json')

 !chmod 600 /root/.kaggle-2/kaggle-2.json

!kaggle datasets download -d rajumavinmar/finger-print-based-blood-group-dataset

import zipfile

# Path to the downloaded zip file
zip_file = 'finger-print-based-blood-group-dataset.zip'  # Adjust this to the actual name if different
output_dir = './dataset/'  # The directory where you want to extract the files

# Unzip the dataset
with zipfile.ZipFile(zip_file, 'r') as zip_ref:
    zip_ref.extractall(output_dir)

print(f"Dataset extracted to {output_dir}")


data_dir = './dataset/dataset_blood_group'

import os
import torch
import torchvision
import tarfile
from torch.utils.data import random_split
from torchvision.datasets import ImageFolder
from torchvision.transforms import ToTensor, Compose, Resize
import matplotlib
import matplotlib.pyplot as plt
%matplotlib inline

transform = Compose([
    Resize((128, 128)),  # Resize all images to 128x128
    ToTensor()          # Convert images to tensors
])
dataset = ImageFolder('/content/dataset/dataset_blood_group', transform=transform)

print(dataset.classes)

img, label = dataset[0]
print(img.shape, label)
plt.imshow(img.permute(1, 2, 0))

random_seed=42
torch.manual_seed(random_seed)

val_size = 1000
test_size = 1000
train_size = len(dataset) - val_size - test_size

train_ds, val_ds, test_ds = random_split(dataset, [train_size, val_size, test_size])
len(train_ds), len(val_ds), len(test_ds)

from torch.utils.data.dataloader import DataLoader

batch_size = 32

train_dl = DataLoader(train_ds, batch_size, shuffle=True, num_workers=4, pin_memory=True)
val_dl = DataLoader(val_ds, batch_size*2, num_workers=4, pin_memory=True) # We can double the batch size

from torchvision.utils import make_grid

def show_batch(dl):
    for images, labels in dl:
        fig, ax = plt.subplots(figsize=(12, 6))
        ax.set_xticks([]); ax.set_yticks([])
        ax.imshow(make_grid(images, nrow=16).permute(1, 2, 0))
        break

show_batch(train_dl)

for images, labels in train_dl:
    print('images shape:', images.shape)
    break

import torch.nn as nn
import torch.nn.functional as F

def accuracy(outputs, labels):
    _, preds = torch.max(outputs, dim=1)
    return torch.tensor(torch.sum(preds == labels).item() / len(preds))

class ImageClassificationBase(nn.Module):
    def training_step(self, batch):
        images, labels = batch
        out = self(images)                  # Generate predictions
        loss = F.cross_entropy(out, labels) # Calculate loss
        return loss

    def validation_step(self, batch):
        images, labels = batch
        out = self(images)                    # Generate predictions
        loss = F.cross_entropy(out, labels)   # Calculate loss
        acc = accuracy(out, labels)           # Calculate accuracy
        return {'val_loss': loss.detach(), 'val_acc': acc}

    def validation_epoch_end(self, outputs):
        batch_losses = [x['val_loss'] for x in outputs]
        epoch_loss = torch.stack(batch_losses).mean()   # Combine losses
        batch_accs = [x['val_acc'] for x in outputs]
        epoch_acc = torch.stack(batch_accs).mean()      # Combine accuracies
        return {'val_loss': epoch_loss.item(), 'val_acc': epoch_acc.item()}

    def epoch_end(self, epoch, result):
        print("Epoch [{}], last_lr: {:.5f}, train_loss: {:.4f}, val_loss: {:.4f}, val_acc: {:.4f}".format(
            epoch, result['lrs'][-1], result['train_loss'], result['val_loss'], result['val_acc']))


def conv_block(in_channels, out_channels, pool=False):
    layers = [nn.Conv2d(in_channels, out_channels, kernel_size=3, padding=1),
              nn.BatchNorm2d(out_channels),
              nn.ReLU(inplace=True)]
    if pool:
        layers.append(nn.MaxPool2d(2))
    return nn.Sequential(*layers)

class ResNet9(ImageClassificationBase):
    def __init__(self, in_channels, num_classes):
        super().__init__()
        self.conv1 = conv_block(in_channels, 64) #64 x 32x 32
        self.conv2 = conv_block(64, 128, pool=True) # 128 x 16 x 16
        self.res1 = nn.Sequential(conv_block(128, 128), # 128 x 16 x 16
                                  conv_block(128, 128)) # 128 x 16 x 16

        self.conv3 = conv_block(128, 256, pool=True) # 256 x 8 x 8
        self.conv4 = conv_block(256,512, pool=True) # 512 x 4 x 4
        self.res2 = nn.Sequential(conv_block(512, 512), # 512 x 4 x 4
                                  conv_block(512, 512))# 512 x 4 x 4

        self.classifier = nn.Sequential(nn.AdaptiveMaxPool2d(1), # 512 x 1 x 1
                                        nn.Flatten(), # 512
                                        nn.Dropout(0.2),
                                        nn.Linear(512, num_classes)) # 10
    def forward(self, xb):
        out = self.conv1(xb)
        out = self.conv2(out)
        out = self.res1(out) + out
        out = self.conv3(out)
        out = self.conv4(out)
        out = self.res2(out) + out
        out = self.classifier(out)
        return out


def get_default_device():
    if torch.cuda.is_available():
        return torch.device('cuda')
    else:
        return torch.device('cpu')

def to_device(data, device):
    if isinstance(data, (list,tuple)):
        return [to_device(x, device) for x in data]
    return data.to(device, non_blocking=True)

class DeviceDataLoader():
    def __init__(self, dl, device):
        self.dl = dl
        self.device = device

    def __iter__(self):
        for b in self.dl:
            yield to_device(b, self.device)

    def __len__(self):
        return len(self.dl)

device = get_default_device()
device

train_dl = DeviceDataLoader(train_dl, device)
val_dl = DeviceDataLoader(val_dl, device)
model = to_device(ResNet9(3, 8), device)
model

@torch.no_grad()
def evaluate(model, val_loader):
    model.eval()
    outputs = [model.validation_step(batch) for batch in val_loader]
    return model.validation_epoch_end(outputs)

def get_lr(optimizer):
    for param_group in optimizer.param_groups:
        return param_group['lr']

def fit_one_cycle(epochs, max_lr, model, train_loader, val_loader,
                  weight_decay=0, grad_clip=None, opt_func=torch.optim.SGD):
    torch.cuda.empty_cache()
    history = []

    # Set up cutom optimizer with weight decay
    optimizer = opt_func(model.parameters(), max_lr, weight_decay=weight_decay)
    # Set up one-cycle learning rate scheduler
    sched = torch.optim.lr_scheduler.OneCycleLR(optimizer, max_lr, epochs=epochs,
                                                steps_per_epoch=len(train_loader))

    for epoch in range(epochs):
        # Training Phase
        model.train()
        train_losses = []
        lrs = []
        for batch in train_loader:
            loss = model.training_step(batch)
            train_losses.append(loss)
            loss.backward()

            # Gradient clipping
            # Gradient clipping
            if grad_clip:
                nn.utils.clip_grad_value_(model.parameters(), grad_clip)

            optimizer.step()
            optimizer.zero_grad()

            # Record & update learning rate
            lrs.append(get_lr(optimizer))
            sched.step()

        # Validation phase
        result = evaluate(model, val_loader)
        result['train_loss'] = torch.stack(train_losses).mean().item()
        result['lrs'] = lrs
        model.epoch_end(epoch, result)
        history.append(result)
    return history

evaluate(model, val_dl)

epochs = 20
max_lr = 0.01
grad_clip = 0.1
weight_decay = 1e-4
opt_func = torch.optim.Adam
history = []

%%time
history += fit_one_cycle(epochs, max_lr, model, train_dl, val_dl,
                             grad_clip=grad_clip,
                             weight_decay=weight_decay,
                             opt_func=opt_func)

def plot_accuracies(history):
    accuracies = [x['val_acc'] for x in history]
    plt.plot(accuracies, '-x')
    plt.xlabel('epoch')
    plt.ylabel('accuracy')
    plt.title('Accuracy vs. No. of epochs');


plot_accuracies(history)

def plot_losses(history):
    train_losses = [x.get('train_loss') for x in history]
    val_losses = [x['val_loss'] for x in history]
    plt.plot(train_losses, '-bx')
    plt.plot(val_losses, '-rx')
    plt.xlabel('epoch')
    plt.ylabel('loss')
    plt.legend(['Training', 'Validation'])
    plt.title('Loss vs. No. of epochs');

plot_losses(history)

def plot_lrs(history):
    lrs = np.concatenate([x.get('lrs', []) for x in history])
    plt.plot(lrs)
    plt.xlabel('Batch no.')
    plt.ylabel('Learning rate')
    plt.title('Learning Rate vs. Batch no.');

import numpy as np


plot_lrs(history)

test_loader = DeviceDataLoader(DataLoader(test_ds, batch_size*2), device)
result = evaluate(model, test_loader)
result

from sklearn.metrics import classification_report

@torch.no_grad()
def evaluate_with_predictions(model, val_loader):
    model.eval()
    predictions, targets = [], []
    for batch in val_loader:
        images, labels = batch
        outputs = model(images)
        _, preds = torch.max(outputs, dim=1)
        predictions.extend(preds.cpu().numpy())
        targets.extend(labels.cpu().numpy())
    return np.array(predictions), np.array(targets)

predictions, targets = evaluate_with_predictions(model, test_loader)
print("\nClassification Report:\n")
print(classification_report(targets, predictions, target_names=dataset.classes))

def visualize_predictions(model, val_loader, num_images=6):
    model.eval()
    images, labels = next(iter(val_loader))
    images, labels = images[:num_images], labels[:num_images]
    outputs = model(images)
    _, preds = torch.max(outputs, dim=1)

    fig, axes = plt.subplots(1, num_images, figsize=(15, 6))
    for i, ax in enumerate(axes):
        ax.imshow(images[i].permute(1, 2, 0).cpu())
        ax.set_title(f"Actual: {dataset.classes[labels[i]]}\nPredicted: {dataset.classes[preds[i]]}")
        ax.axis('off')
    plt.tight_layout()
    plt.show()


visualize_predictions(model, test_loader)

def predict_image(img, model):
    # Convert to a batch of 1
    xb = to_device(img.unsqueeze(0), device)
    # Get predictions from model
    yb = model(xb)
    # Pick index with highest probability
    _, preds  = torch.max(yb, dim=1)
    # Retrieve the class label
    return dataset.classes[preds[0].item()]

img, label = test_ds[179]
plt.imshow(img.permute(1, 2, 0))
print('Label:', dataset.classes[label], ', Predicted:', predict_image(img, model))

torch.save(model.state_dict(), 'FingurePrintTOBloodGroup.pth')

Test-01

from PIL import Image
img = Image.open('/content/dataset/dataset_blood_group/AB-/cluster_5_1064.BMP')
plt.imshow(img)

import torchvision.transforms as tt
transform = Compose([
    Resize((128, 128)),# Adjust the crop as per your needs
    tt.RandomHorizontalFlip(),
    ToTensor()# Convert the image to a tensor
])

# Apply the transformations to the image
img_tensor = transform(img)

plt.imshow(img_tensor.permute(1, 2, 0))

from PIL import Image
import torchvision.transforms as tt
from torchvision.transforms import Compose, Resize, ToTensor

img = Image.open("/content/dataset/dataset_blood_group/AB-/cluster_5_1064.BMP").convert("RGB")

transform = Compose([
    Resize((128, 128)),
    tt.RandomHorizontalFlip(),
    ToTensor(),
    # Convert to 3 channels by selecting RGB channels
    lambda x: x[:3, :, :]
])

img_tensor = transform(img)

img_tensor.shape

res = predict_image(img_tensor, model)
res

Test-02

from PIL import Image
img = Image.open('/content/dataset/dataset_blood_group/A-/cluster_1_1022.BMP')
plt.imshow(img)

import torchvision.transforms as tt
transform = Compose([
    Resize((128, 128)),# Adjust the crop as per your needs
    tt.RandomHorizontalFlip(),
    ToTensor()# Convert the image to a tensor
])

# Apply the transformations to the image
img_tensor = transform(img)

plt.imshow(img_tensor.permute(1, 2, 0))

from PIL import Image
import torchvision.transforms as tt
from torchvision.transforms import Compose, Resize, ToTensor

img = Image.open("/content/dataset/dataset_blood_group/A-/cluster_1_1022.BMP").convert("RGB")

transform = Compose([
    Resize((128, 128)),
    tt.RandomHorizontalFlip(),
    ToTensor(),
    # Convert to 3 channels by selecting RGB channels
    lambda x: x[:3, :, :]
])

img_tensor = transform(img)

img_tensor.shape

res = predict_image(img_tensor, model)
res

Test -03


from PIL import Image
img = Image.open('/content/dataset/dataset_blood_group/A+/cluster_0_1001.BMP')
plt.imshow(img)

import torchvision.transforms as tt
transform = Compose([
    Resize((128, 128)),# Adjust the crop as per your needs
    tt.RandomHorizontalFlip(),
    ToTensor()# Convert the image to a tensor
])

# Apply the transformations to the image
img_tensor = transform(img)

plt.imshow(img_tensor.permute(1, 2, 0))

from PIL import Image
import torchvision.transforms as tt
from torchvision.transforms import Compose, Resize, ToTensor

img = Image.open("/content/dataset/dataset_blood_group/A+/cluster_0_1001.BMP").convert("RGB")

transform = Compose([
    Resize((128, 128)),
    tt.RandomHorizontalFlip(),
    ToTensor(),
    # Convert to 3 channels by selecting RGB channels
    lambda x: x[:3, :, :]
])

img_tensor = transform(img)

img_tensor.shape

res = predict_image(img_tensor, model)
res

Test -04


from PIL import Image
img = Image.open('/content/dataset/dataset_blood_group/AB+/cluster_4_100.BMP')
plt.imshow(img)

import torchvision.transforms as tt
transform = Compose([
    Resize((128, 128)),# Adjust the crop as per your needs
    tt.RandomHorizontalFlip(),
    ToTensor()# Convert the image to a tensor
])

# Apply the transformations to the image
img_tensor = transform(img)

plt.imshow(img_tensor.permute(1, 2, 0))

from PIL import Image
import torchvision.transforms as tt
from torchvision.transforms import Compose, Resize, ToTensor

img = Image.open("/content/dataset/dataset_blood_group/AB+/cluster_4_100.BMP").convert("RGB")

transform = Compose([
    Resize((128, 128)),
    tt.RandomHorizontalFlip(),
    ToTensor(),
    # Convert to 3 channels by selecting RGB channels
    lambda x: x[:3, :, :]
])

img_tensor = transform(img)

img_tensor.shape

res = predict_image(img_tensor, model)
res

Test -05


from PIL import Image
img = Image.open('/content/dataset/dataset_blood_group/B+/cluster_2_1077.BMP')
plt.imshow(img)

import torchvision.transforms as tt
transform = Compose([
    Resize((128, 128)),# Adjust the crop as per your needs
    tt.RandomHorizontalFlip(),
    ToTensor()# Convert the image to a tensor
])

# Apply the transformations to the image
img_tensor = transform(img)

plt.imshow(img_tensor.permute(1, 2, 0))

from PIL import Image
import torchvision.transforms as tt
from torchvision.transforms import Compose, Resize, ToTensor

img = Image.open("/content/dataset/dataset_blood_group/B+/cluster_2_1077.BMP").convert("RGB")

transform = Compose([
    Resize((128, 128)),
    tt.RandomHorizontalFlip(),
    ToTensor(),
    # Convert to 3 channels by selecting RGB channels
    lambda x: x[:3, :, :]
])

img_tensor = transform(img)

img_tensor.shape

res = predict_image(img_tensor, model)
res

Test -06


from PIL import Image
img = Image.open('/content/dataset/dataset_blood_group/O+/cluster_6_1094.BMP')
plt.imshow(img)

import torchvision.transforms as tt
transform = Compose([
    Resize((128, 128)),# Adjust the crop as per your needs
    tt.RandomHorizontalFlip(),
    ToTensor()# Convert the image to a tensor
])

# Apply the transformations to the image
img_tensor = transform(img)

plt.imshow(img_tensor.permute(1, 2, 0))

from PIL import Image
import torchvision.transforms as tt
from torchvision.transforms import Compose, Resize, ToTensor

img = Image.open("/content/dataset/dataset_blood_group/O+/cluster_6_1094.BMP").convert("RGB")

transform = Compose([
    Resize((128, 128)),
    tt.RandomHorizontalFlip(),
    ToTensor(),
    # Convert to 3 channels by selecting RGB channels
    lambda x: x[:3, :, :]
])

img_tensor = transform(img)

img_tensor.shape

res = predict_image(img_tensor, model)
res

Test -07


from PIL import Image
img = Image.open('/content/dataset/dataset_blood_group/O-/cluster_7_1151.BMP')
plt.imshow(img)

import torchvision.transforms as tt
transform = Compose([
    Resize((128, 128)),# Adjust the crop as per your needs
    tt.RandomHorizontalFlip(),
    ToTensor()# Convert the image to a tensor
])

# Apply the transformations to the image
img_tensor = transform(img)

plt.imshow(img_tensor.permute(1, 2, 0))

from PIL import Image
import torchvision.transforms as tt
from torchvision.transforms import Compose, Resize, ToTensor

img = Image.open("/content/dataset/dataset_blood_group/O-/cluster_7_1151.BMP").convert("RGB")

transform = Compose([
    Resize((128, 128)),
    tt.RandomHorizontalFlip(),
    ToTensor(),
    # Convert to 3 channels by selecting RGB channels
    lambda x: x[:3, :, :]
])

img_tensor = transform(img)

img_tensor.shape

res = predict_image(img_tensor, model)
res

Test -08


from PIL import Image
img = Image.open('/content/dataset/dataset_blood_group/B-/cluster_3_1184.BMP')
plt.imshow(img)

import torchvision.transforms as tt
transform = Compose([
    Resize((128, 128)),# Adjust the crop as per your needs
    tt.RandomHorizontalFlip(),
    ToTensor()# Convert the image to a tensor
])

# Apply the transformations to the image
img_tensor = transform(img)

plt.imshow(img_tensor.permute(1, 2, 0))

from PIL import Image
import torchvision.transforms as tt
from torchvision.transforms import Compose, Resize, ToTensor

img = Image.open("/content/dataset/dataset_blood_group/B-/cluster_3_1184.BMP").convert("RGB")

transform = Compose([
    Resize((128, 128)),
    tt.RandomHorizontalFlip(),
    ToTensor(),
    # Convert to 3 channels by selecting RGB channels
    lambda x: x[:3, :, :]
])

img_tensor = transform(img)

img_tensor.shape

res = predict_image(img_tensor, model)
res
